{
  "POCS":[
    {
      "id": 0,
      "image": "images/css.jpg",
      "title": "CSS",
      "subtitle": "Basic CSS, Flexbox, CSS Grid & Transformations",
      "description": "<h1>Opstart en Flexbox</h1><br> In de eerste week heb ik de start gemaakt voor het vak Development. Ik gebruik als IDE Atom of Visual Studio Code.<br> Als eerste heb ik een tutorial voor CSS Flexbox gezocht en heb ik aan de hand van deze tutorial een POC gemaakt voor de basis van het gebruik van CSS Flexbox. <br><br><i> Ik heb deze tutorial gevolgd: <br><b> https://www.youtube.com/watch?v=0e02dl66PYo</b></i><br><br> In de tutorial wordt de basis van Flexbox uitgelegd en wat je allemaal met flexbox kunt doen.<br><br> Door flexbox te gebruiken in mijn CSS heb ik de text containers op de juiste plaats kunnen zetten en kan ik er ook voor zorgen dat deze containers verplaatsen en dezelfde verhouding houden als de resolutie veranderd. Zelf had ik nog nooit flexbox gebruikt dus vond ik het interessant om te leren hoe dit werkt en hoe ik dit bij het maken van een website kan gebruiken om de content op mijn pagina netjes en op de goede plaats weer te geven.<br><br> Uiteindelijk heb ik met de tutorial in een half uur het volgende met flexbox gemaakt: <img src='images/flexpoc.jpg' alt='Foto van de poc.' class='flexpocimg'><h1>Webpagina met Flexbox</h1><br><br> In de 2e week heb ik verder gewerkt aan Flexbox. Dit heb ik gedaan door een webpagina te maken waarbij ik Flexbox heb gebruikt om de layout te maken.<br> Screenshot van de gemaakte pagina:<img src='images/flexpagetop.jpg' alt='Foto van website.' class='flexpocimg'<br><br> Ik heb door het gebruik van Flexbox de header, de afbeeldingen en de content op de juiste plaats gezet. Bij het maken van de webpagina ben ik beter geworden in het gebruik van Flexbox voor het maken van de lay-out van een webpagina.<br><br> Aan de onderkant van de webpagina het ik Flexbox ook gebruikt voor de lay-out van de footer: <img src='images/flexpagebot.jpg' alt='Foto van de poc.' class='flexpocimg'><br><br> Door het gebruik van Flexbox ben ik beter geworden in het indelen van mijn webpagina’s en kan ik nu beter en makkelijker de lay-out van mijn webpagina’s vormgeven dan voorheen.<br><br><br><h1>CSS Grid & Transitions / Transformations</h1><br> In de derde week ben ik begonnen met CSS Grid. Door middel van het volgen van een tutorial op youtube heb ik de basis van CSS Grid geleerd te gebruiken om een webpagina te bouwen en vorm te geven. Door gebruik te maken van CSS-Grid kan ik nu makkelijk mijn webpagina’s indelen en elementen makkelijk verplaatsen op mijn pagina door alleen van CSS gebruik te maken. <br><br> Ook heb ik geleerd op CSS Grid te gebruiken om een website responsive te maken voor het gebruik van de website op een kleiner formaat zoals op een telefoon.<br><br> <i>Tutorial: <b>https://www.youtube.com/watch?v=HgwCeNVPlo0</b></i><br><br> Het resultaat van de tutorial is in een aantal screenshots hieronder te zien.<img src='images/gridpoc.jpg' alt='Foto van de poc.' class='flexpocimg'><br> Hierboven staat de standaard pagina op volledig formaat, gemaakt met behulp van CSS Grid.<br><br>Hieronder staat dezelfde website als hierboven, maar dan voor weergave op een kleiner formaat. De website is responsive gemaakt met CSS Grid door de onderstaande code te gebruiken bij een groot scherm en de standaardcode te gebruiken voor de mobiele weergave.<br><div style='text-align: center'><img src='images/gridpocmobile.jpg' alt='Foto van de poc.' class='gridpocimg'></div><iframe class='codeEmbed' width='100%' height='300' src='//jsfiddle.net/Robin99G/6xefdsmg/embedded/css/dark/' allowfullscreen='allowfullscreen' allowpaymentrequest frameborder='0'></iframe>Vervolgens ben ik ook bezig geweest met het maken van simpele animaties met CSS door middel van transitions en transformations met CSS. Ik heb 2 tutorials gevolgd op youtube en vervolgens 2 kleine webpagina’s gemaakt met een paar simpele transitions en transformations.<br><br><a href='/pocs/CSS_Transitions/index.html' target='blank'><button class='pocButton'>CSS Transitions</button></a><a href='/pocs/CSS_Transformations/index.html' target='blank'><button class='pocButton'>CSS Tranformations</button></a> "
    },
    {
      "id": 1,
      "image": "images/calculator.jpg",
      "title": "Basic Javascript",
      "subtitle": "De basis van Javascript",
      "description": "Bij het begin van sprint 2 ben ik begonnen met de basis van Javascript. Aangezien ik al een beetje ervaring had met javascript heb ik de basis herhaald door het maken van 2 kleine webpagina’s. Een simpele rekenmachine en een steen, papier schaar spel.<br><br> Bij het maken van deze 2 webpagina’s heb ik gebruikt gemaakt van variabelen, functies, If statements en een beetje DOM. Door dit te doen ging de basis van javascript weer wat soepeler.<br><br> Ik vond het voor mezelf fijn om deze 2 applicaties te maken omdat ik zo voor mezelf even kort kon herhalen wat ik al eerder heb geleerd. Verder heb ik ook nog een beetje verder geëxperimenteerd / geoefend met CSS door de opmaak van de pagina.<br><br> <i>De 2 gemaakte webpagina’s:</i> <img src='images/jsbasic1.png' alt='De tweede versie van het storyboard' class='flexpocimg'> <br> <img src='images/jsbasic2.png' alt='De tweede versie van het storyboard' class='flexpocimg'> <br> Bij het maken van het steen, papier, schaar spel heb ik naast het herhalen van wat ik al wist, ook geleerd hoe ik met javascript nieuwe tekst in een lege div kan zetten en deze te updaten om in dit geval aan te kunnen geven wie het spel heeft gewonnen.<br><br> Link naar de 2 pocs met de code:<br><br><a href='/pocs/calculator/index.html' target='blank'><button class='pocButton'>JS Calculator</button></a><a href='/pocs/rps/index.html' target='blank'><button class='pocButton'>Rock, Papaer, Scissors</button></a>"
    },
    {
      "id": 2,
      "image": "images/dom.jpg",
      "title": "DOM",
      "subtitle": "Using Js to change content",
      "description": "In de rest van sprint 1 ben ik bezig geweest met DOM voor Javascript. Na een uitleg in de vissenkom en wat research op W3schools heb ik een POC gemaakt waarin ik geleerd heb hoe ik stijl kan toevoegen aan een div en hoe ik div’s kan aanpassen om bijvoorbeeld tekst op het scherm te zetten of een bepaalde class of stijl aan een div kan geven. <br><br> Door het maken van deze POC heb ik een beter inzicht gekregen in hoe ik DOM kan gebruiken om met Javascript de stijl en de content van een website kan aanpassen of nieuwe content toe kan voegen of verwijderen. <br><br> In mijn gemaakte POC kun je door op de div’s te klikken de stijl / tekst laten veranderen doordat er in mijn javascript een bepaalde class aan de div wordt gekoppeld of doordat er nieuwe tekst wordt aangemaakt. <br><br><a href='/pocs/dom/index.html' target='blank'><button class='pocButton'>DOM POC + Code</button></a><br><i>Een voor- en na screenshot van mijn gemaakte POC voor het gebruik van DOM om divs stijl en/of tekst te geven:<br></i><img src='images/dombefore.jpg' alt='Foto van de poc.' class='flexpocimg'><img src='images/domafter.jpg' alt='Foto van de poc.' class='flexpocimg'> "
    },
    {
      "id" : 3,
      "image": "images/timer.png",
      "title": "Arrays & Timers",
      "subtitle" : "Changing color on a timer",
      "description" : "Bij het maken van deze poc heb ik de focus gelegd op het gebruiken van een array en een timer. Om te beginnen heb ik op internet (W3Schools) opgezocht hoe arrays en timers binnen JavaScript werken en hoe ik deze kan gebruiken in een poc. Vervolgens heb ik een poc gemaakt waarbij er in het midden van het scherm een grote timer te zien is die de huidige tijd op het scherm laat zien. Naast deze timer loopt er op de achtergrond die een functie uitvoert om de 5 seconden. <br><br> Deze functie zorgt ervoor dat de achtergrondkleur van de webpagina elke 5 seconden wordt veranderd. Hierbij heb ik gebruik gemaakt van een array. Dit heb gedaan door de mogelijke achtergrondkleuren in een array op te slaan en vervolgens in de functie telkens een andere waarde uit de array te kiezen. De functie genereerd elke keer dat hij wordt uitgevoerd een willekeurig getal tussen de 0 en de lengte van de array en kiest vervolgens de kleur die bij de index van het gegenereerde getal hoort. Ik heb er met een while loop ook voor gezorgd dat de achtergrondkleur niet twee keer achter elkaar dezelfde kan zijn door telkens de laatste waarde voor de gebruikte index op te slaan en deze te vergelijken met de nieuw gekozen index. <br><br> <i> De array heb ik als volgt aangemaakt, ook is de eerste kleur die wordt gebruikt rood: </i><br> <img src='images/array.jpg' alt='Het aanmaken van de Array' class='flexpocimg'>Ik heb door het maken van deze poc geleerd hoe ik een array moet aanmaken en waardes uit de array kan gebruiken om iets in mijn code of op mijn pagina te doen of veranderen. Ook heb ik geleerd hoe ik timers kan gebruiken om bijvoorbeeld de huidige tijd weer te geven of om een event op een timer te laten plaatsvinden. Ook heb ik bij het maken van deze poc weer gebruik gemaakt van DOM Manipulation om de achtergrondkleur te veranderden en de om de timer op het scherm te plaatsen en te updaten. Verder heb ik een random functie gebruikt en geleerd hoe ik door middel van een while loop er voor kan zorgen dat een gekozen getal nooit 2 keer achter elkaar hetzelfde is om er zo voor te zorgen dat in dit geval de achtergrondkleur niet 2 keer achter elkaar hetzelfde is.<br><br> <i> Link naar de poc met de code: </i><br><br> <a href='/pocs/Array_Timers/index.html' target='blank'><button class='pocButton'>POC met de code</button></a>  "
    },
    {
      "id": 4,
      "image": "images/git.jpg",
      "title": "Versiebeheer",
      "subtitle": "Gebruikt van Git met Github",
      "description":"Bij het maken van mijn portfolio heb ik gebruik gemaakt van versiebeheer in de vorm van Git. Aangezien ik in het vorige semeseter ook al even met Git in de vorm van GitHub heb gewerkt voor de proftaak heb ik ervoor gekozen om ook nu weer met GitHub te werken aangezien ik hier al bekend mee was en dit al set-up op mijn laptop had. <br> Om in mijn GitHub repository te werken heb ik GitKraken gebruikt als interface aangezien ik hier ook al eerder mee gewerkt had.<br><br> Vervolgens heb ik een nieuwe repository op GitHub aangemaakt en de eerste versie van mijn Portfolio geupload en vervolgens de repository op Gitkraken geopend om zo verder te werken.<br><br> Ik heb tijdens het maken van nieuwe pagina's of nieuwe delen van mijn website in een aparte branch gewerkt en zodra een nieuw deel van mijn website af was heb ik deze gemerged met de master branch waar ik altijd de laatste werkende versie van mijn portfolio in heb staan. Tijdens het werken heb ik steeds bij een aantal afgeronden aanpassingen / toevoegingen een commit gedaan via GitKraken en aan het einde van de dag of na het doen van een grotere update deze gepushed naar GitHub. <br><br> Door Git te gebruiken om mijn portfolio te maken heb ik de basis van Git geleerd en hoe ik dit kan gebruiken om een duidelijk overzicht te krijgen in hoe ik mijn portfolio heb opgebouwd. Ook weet ik nu hoe ik Git kan gebruiken om eerdere versies van mijn Portfolio terug te halen om fouten eruit te halen en dit tegelijkertijd te kunnen gebruiken als online backup. <br> <br> Hieronder staat een lijst van al mijn commits die ik heb gedaan voor het maken van mijn portfolio. Door op de beschrijving van de commit te klikken wordt er naar de GitHub pagina van de commit gelinkt. Onder de lijst staat ook nog een link naar de gehele repository op GitHub.<br><br><div style='margin:auto; width:500px; margin-top:50px;'><iframe class='gitwidget' src='http://tylerlh.github.com/github-latest-commits-widget/?username=RobinGalema&repo=Portfolio&branch=working&limit=200'allowtransparency='true' frameborder='0' scrolling='yes' width='500px' height='250px'></iframe></div><br><div style='margin:auto; width:250px;'><a href='https://github.com/RobinGalema/Portfolio/commits/working' target='blank'><button class='pocButton'>GitHub Repository</button></a></div>"
    },
    {
      "id": 5,
      "image": "images/json.png",
      "title": "JSON & AJAX",
      "subtitle": "Gebruik van json voor mijn portfolio",
      "description": "In plaats van een POC voor het gebruik van Json te maken, heb ik besloten om Json in mijn portfoliowebsite te gebruiken. Zo is bijvoorbeeld deze pagina geladen uit een Json file. <br><br> Ik heb aan het begin van sprint 2 een uitleg van Geert Jan gevolgd over het gebruik van Json. Hieruit het ik de basis van het schrijven van een Json file geleerd. Vervolgens heb ik nog op internet onderzoek gedaan naar hoe ik dit kon gebruiken om een webpagina in te laten met behulp van AJAX. <br><br> Toen ik de basis gevormd had door de uitleg en onderzoek ben ik begonnen met het opzetten van een systeem dat mijn opdrachten voor Sco, Uex en Dev laadt vanuit een Json bestand. Eerst heb ik hiervoor een lege html pagina gemaakt met alleen een header, een footer en een lege section voor de content. Vervolgens heb ik een Json bestand aangemaakt waarin ik een aantal pocs van Dev verwerkt heb. De Json file van een deel van de Dev pocs staat hieronder weergegeven: <br><br><iframe src='https://pastebin.com/embed_iframe/Z7yMSTsE' style='border:none;width:100%;height:500px;'></iframe><br><br> Vervolgens heb ik het script van Geert Jan gebruikt om in javascript mijn json file te kunnen openen. Toen ik dit voor elkaar had heb ik een functie geschreven die op basis van de index van de opdracht in de json file, de goede content op de lege html pagina zet. Deze is hieronder weergegeven:<br><br><iframe src='https://pastebin.com/embed_iframe/T4f5njHN' style='border:none;width:100%;height:500px;'></iframe> <br><br> Elke keer als er ergens op een button wordt gedrukt om een nieuwe pagina te ladan dan veranderd er een variabele die wordt opgeslagen. Deze variabele bevat de index van de pagina. Als er naar de poc of de opdrachtenpagina wordt verwezen dan wordt er door de input van button gekeken naar welke poc of opdracht er geladen moet worden en vervolgens wordt de data uit de Json file met behulp van DOM Manipulation in de goede volgorde op de lege pagina gezet. Ook worden er elke keer als de Sco, Uex of Dev pagina wordt geladen met behulp van de Json file thumbnails gemaakt van alle opdrachten van dat vak. Dit wordt gedaan door te loopen door alle opdrachten van een vak (deze staan in een array) en voor elke opdracht de titel, subtitel en de afbeelding uit de Json file te halen en deze met DOM Manipulation op de pagina bij opdrachten te zetten. <br><br> Op deze manier heb ik ervoor gezorgd dat ik maar 1 html pagina nodig heb om al mijn opdrachten te laden door gebruik te maken van Json. Ook kan ik zo makkelijk de thumbnails voor mijn opdrachten op de pagina's van mijn vakken laten genereren. <br><br> Ik heb door Json en Ajax in mijn portfolio te gebruiken geleerd hoe ik Json kan uitlezen en gebruiken. Ook weet ik nu hoe ik zelf een Json bestand kan schrijven en deze vervolgens kan gebruiken. Ook heb ik door dit in mijn portfolio te gebruiken kunnen oefenen met het gebruik van DOM Manipulation en met het gebruik van basic JavaScript. Hierdoor ben ik hier ook beter in geworden."
    },
    {
      "id": 6,
      "image" : "images/portfoliothumb.png",
      "title": "Portfolio Website",
      "subtitle": "Development in mijn portfolio",
      "description": "Op deze website heb ik vanzelfsprekend veel developmentonderdelen gebruikt. Op deze pagina wil ik deze graag benoemen.<br><br> Ik heb de volgende onderdelen van development gebruikt op deze website:<br><br> - Basic CSS, Flexbox, Transitions & Transformations. <br> - Statements, datatypes, loops & functies.<br> - DOM manipulation & Eventhandlers <br> - Json & Ajax.<br> - Versiebeheer. <br><br> <b>Basic CSS, Flexbox, Transitions & Transformations.</b><br> Ik heb dit bijna op elke plaats op de website gebruikt voor de vormgeving. Ik heb op veel plaatsen waar ik content naast of boven elkaar wil plaatsen gebruik gemaakt van Flexbox. Zo zijn bijvoorbeeld de thumbnails van de opdrachten met Flexbox op de goede plaats gezet:<br><br><iframe width='100%' height='400' src='//jsfiddle.net/Robin99G/4oewm67y/embedded/css/' allowfullscreen='allowfullscreen' allowpaymentrequest frameborder='0'></iframe> <br><br> In de CSS hierboven staat de styling van een de thumbnails. Voor het plaatsen van de losse thumbnails in de container wordt Flexbox gebruikt en met een ':hover' zorg ik ervoor dat de achtergrondkleur van de thumbnail veranderd als je er met je muis overheen gaat om aan te geven dat het een link is.<br><br> Voor de rest gebruik ik op veel plaatsen Transitions en Transformations voor bijvoorbeeld het hoveren van buttons en andere objecten.<br><br><b>Statements, datatypes, loops & functies</b><br> Voor het maken van het technische deel van mijn portfolio heb ik met javascript deze onderdelen gebruikt in mijn code. In het voorbeeld hieronder heb ik gebruik gemaakt van variabelen en statements in een functie.<br><br><iframe width='100%' height='400' src='//jsfiddle.net/Robin99G/4oewm67y/3/embedded/js/' allowfullscreen='allowfullscreen' allowpaymentrequest frameborder='0'></iframe><br><br> De functie zorgt er voor dat de navigatiebalk meescrollt als de gebruiker op de website naar beneden scrollt. Eerst wordt de navigatiebalk in een variabele gezet. Hierna wordt de aftand vanaf de bovenkant van de webpagina van de navigatiebalk in een variabele gezet. Vervolgens wordt er een functie uitgevoerd die ervoor zorgt dat de navigatiebalk een extra class krijgt waardoor deze met het scherm meescrollt als de afstand vanaf de bovenkant meer is dan 20 pixels. Deze functie wordt elke keer als de gebruikers scrollt uitgevoerd zodat er telkens gekeken kan worden of de navigatiebalk ver genoeg van de bovenkant van de pagina af is. Als dit niet meer het geval is, dan wordt de stikcy class weer verwijderd en blijft de balk boven in het scherm staan.<br><br> In het onderstaande voorbeeld heb ik gebruikt gemaakt van onder andere een loop.<br><br><iframe width='100%' height='400' src='//jsfiddle.net/Robin99G/4oewm67y/5/embedded/js/' allowfullscreen='allowfullscreen' allowpaymentrequest frameborder='0'></iframe><br><br> Dit stuk code gebruikt een Json file om vervolgens met een 'for' loop door alle items die in een array in de json file staan heen te loopen en vervolgens van al deze items een thumbnail te maken op basis van de data in de json file.<br><br><b>DOM manipulation & Eventhandlers</b><br> Ik heb zoals in het voorbeeld bij het vorige kopje te zien is ook gebruik gemaakt van DOM Manipulation. Dit heb gedaan bij bijvoorbeeld het maken van de thumbnails en bij het inladen van de content van de opdrachten. Ik lees eerste data uit een Json bestand uit en vervolgens zet ik deze in een variabele. Hierbij maak ik alle elementen aan en vervolgens voeg ik deze samen en append ik ze aan de goede sectie op mijn website. <br> Bij het klikken op buttons of links maak ik vaak gebruik van eventhandlers. Zo maak ik bij buttons gebruik van 'Onclick', in javascript maak ik gebruik van 'Onload' en van 'Onscroll'. In het voorbeeld hieronder staan een aantal voorbeelden van eventlisteners.<br><br><iframe width='100%' height='400' src='//jsfiddle.net/Robin99G/4oewm67y/8/embedded/js,html/' allowfullscreen='allowfullscreen' allowpaymentrequest frameborder='0'></iframe><br><br> In het stuk code hierboven wordt met behulp van DOM manipulation met een onload de content op de opdrachtenpagina gezet op basis van de ID van de opdracht die is doorgegeven. In het HTML stuk maak ik gebruik van onclick om een functie aan te roepen die ervoor zorgt dat de pagina wordt veranderd naar de link waarop is geklikt door een id van de pagina door te geve aan de functie die wordt aangeroepen.<br><br><b>Json & Ajax</b><br> Ik heb Json gebruikt om al mijn opdrachten voor Sco, Uex en mijn pocs voor Dev in op te slaan. Ik heb alle data voor de opdrachten zoals de titel, bijbehorende afbeelding en de beschrijving in een Json bestand gezet. Deze wordt vervolgens uitgelezen door een functie en daarna op de website gezet. Een gehele beschrijving met code-snippets is te lezen op de pagina voor Json & Ajax <br><br><a onclick='loadPOC(5)' target='blank'><button class='pocButton'>Json & Ajax</button></a><br><br><b> Versiebeheer </b><br> Voor het maken van deze site heb ik gebruik gemaakt van Git / Github voor versiebeheer. Ik heb een repository op GitHub aangemaakt en hier staat mijn volledige portfolio in. Meer informatie hierover en een link naar mijn GitHub repo is te vinden op de pagina voor versiebeheer.<br><br><a onclick='loadPOC(4)' target='blank'><button class='pocButton'>Veriebeheer</button></a><a href='https://github.com/RobinGalema/Portfolio/commits/working' target='blank'><button class='pocButton'>GitHub Repository</button></a>"
    }
  ]
}
